name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ANSIBLE_VERSION: "2.13"
  PYTHON_VERSION: "3.9"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible-lint yamllint
        
    - name: Lint Ansible playbooks
      run: |
        ansible-lint playbooks/*.yml
        
    - name: Lint YAML files
      run: |
        yamllint -c .yamllint .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: [default, security, upgrade]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install molecule[docker] pytest-testinfra
        
    - name: Run Molecule tests
      run: |
        cd roles/mitum
        molecule test -s ${{ matrix.scenario }}
      env:
        PY_COLORS: '1'
        ANSIBLE_FORCE_COLOR: '1'

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy security scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        
    - name: Run ansible-vault check
      run: |
        find . -name "*.vault" -o -name "*vault*" | while read file; do
          if file "$file" | grep -q "ASCII text"; then
            echo "WARNING: Potential unencrypted vault file: $file"
            exit 1
          fi
        done

  deploy-test:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to test environment
      run: |
        echo "Deploying to test environment..."
        # Add actual deployment steps here
        
  notify:
    needs: [lint, test, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'CI/CD Pipeline finished'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() 