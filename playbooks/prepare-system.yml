---
# System Preparation Playbook
# Version: 4.0.0 - Cross-platform support with security hardening
#
# Performs OS-specific package installation and system configuration.
# Supported OS: Ubuntu/Debian, CentOS/RHEL, macOS (limited)

- name: Prepare systems for Mitum deployment
  hosts: all
  become: yes
  gather_facts: yes
  
  # Error handling strategy
  max_fail_percentage: 30
  serial: "{{ prepare_batch_size | default('100%') }}"
  
  pre_tasks:
    - name: Detect package manager
      set_fact:
        pkg_mgr: >-
          {%- if ansible_os_family == "Debian" -%}apt
          {%- elif ansible_os_family == "RedHat" -%}yum
          {%- elif ansible_os_family == "Darwin" -%}brew
          {%- else -%}unknown{%- endif -%}

    - name: Verify supported package manager
      assert:
        that:
          - pkg_mgr != "unknown"
        fail_msg: "Unsupported OS family: {{ ansible_os_family }}"

  tasks:
    # === Package Cache Update ===
    - name: Update package cache
      block:
        - name: Update apt cache (Debian/Ubuntu)
          apt:
            update_cache: yes
            cache_valid_time: 3600
          when: pkg_mgr == "apt"
          
        - name: Update yum cache (RHEL/CentOS)
          yum:
            update_cache: yes
          when: pkg_mgr == "yum"
          
      tags: [prepare, packages]

    # === Required Package Installation (OS Independent) ===
    - name: Install required packages
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ base_packages[pkg_mgr] }}"
      vars:
        base_packages:
          apt:
            - python3
            - python3-pip
            - python3-venv
            - python3-dev
            - build-essential
            - curl
            - wget
            - git
            - jq
            - htop
            - iotop
            - net-tools
            - dnsutils
            - tar
            - gzip
            - unzip
            - ca-certificates
            - gnupg
            - lsb-release
            - software-properties-common
            - ufw
            - fail2ban
            - chrony  # Time synchronization
          yum:
            - python3
            - python3-pip
            - python3-devel
            - gcc
            - gcc-c++
            - make
            - curl
            - wget
            - git
            - jq
            - htop
            - iotop
            - net-tools
            - bind-utils
            - tar
            - gzip
            - unzip
            - ca-certificates
            - gnupg2
            - firewalld
            - fail2ban
            - chrony
          brew:
            - python3
            - curl
            - wget
            - git
            - jq
            - htop
      tags: [prepare, packages]

    # === Python Package Installation ===
    - name: Install Python packages
      pip:
        name:
          - pymongo
          - requests
          - cryptography
        state: present
        executable: pip3
      tags: [prepare, python]

    # === System User Creation ===
    - name: Create mitum system user
      user:
        name: "{{ mitum_service_user }}"
        system: yes
        shell: /bin/bash
        home: "/home/{{ mitum_service_user }}"
        createhome: yes
        comment: "Mitum blockchain service user"
      tags: [prepare, users]

    - name: Create mitum group
      group:
        name: "{{ mitum_service_group }}"
        system: yes
      tags: [prepare, users]

    # === Directory Structure Creation ===
    - name: Create required directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner | default(mitum_service_user) }}"
        group: "{{ item.group | default(mitum_service_group) }}"
        mode: "{{ item.mode | default('0755') }}"
      loop:
        - path: "{{ mitum_base_dir }}"
        - path: "{{ mitum_install_dir }}"
        - path: "{{ mitum_data_dir }}"
        - path: "{{ mitum_config_dir }}"
        - path: "{{ mitum_keys_dir }}"
          mode: "0700"  # Keys directory more restrictive
        - path: "{{ mitum_log_dir }}"
        - path: "{{ mitum_backup_dir }}"
        - path: "{{ mitum_temp_dir }}"
          owner: "root"
          mode: "1777"  # Temp with sticky bit
      tags: [prepare, directories]

    # === System Limits Configuration ===
    - name: Configure system limits
      pam_limits:
        domain: "{{ mitum_service_user }}"
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.item }}"
        value: "{{ item.value }}"
      loop:
        - { type: 'soft', item: 'nofile', value: '{{ mitum_service_limits.nofile }}' }
        - { type: 'hard', item: 'nofile', value: '{{ mitum_service_limits.nofile }}' }
        - { type: 'soft', item: 'nproc', value: '{{ mitum_service_limits.nproc }}' }
        - { type: 'hard', item: 'nproc', value: '{{ mitum_service_limits.nproc }}' }
        - { type: 'soft', item: 'memlock', value: 'unlimited' }
        - { type: 'hard', item: 'memlock', value: 'unlimited' }
      tags: [prepare, limits]

    # === Kernel Parameter Optimization ===
    - name: Configure sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-mitum.conf
      loop:
        # Network optimization
        - { name: 'net.core.somaxconn', value: '32768' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '8192' }
        - { name: 'net.core.netdev_max_backlog', value: '5000' }
        - { name: 'net.ipv4.ip_local_port_range', value: '1024 65535' }
        - { name: 'net.ipv4.tcp_tw_reuse', value: '1' }
        - { name: 'net.ipv4.tcp_fin_timeout', value: '30' }
        
        # Memory optimization
        - { name: 'vm.swappiness', value: '10' }
        - { name: 'vm.dirty_ratio', value: '15' }
        - { name: 'vm.dirty_background_ratio', value: '5' }
        
        # File system
        - { name: 'fs.file-max', value: '2097152' }
      when: ansible_os_family != "Darwin"
      tags: [prepare, kernel]

    # === Time Synchronization Configuration ===
    - name: Configure time synchronization
      block:
        - name: Ensure chrony is running
          systemd:
            name: chrony
            state: started
            enabled: yes
          when: ansible_service_mgr == "systemd"

        - name: Configure chrony
          template:
            src: chrony.conf.j2
            dest: /etc/chrony/chrony.conf
            backup: yes
          notify: restart chrony
          when: ansible_os_family != "Darwin"
      tags: [prepare, time]

    # === Firewall Configuration ===
    - name: Configure firewall
      include_tasks: tasks/configure-firewall.yml
      when: security_hardening.firewall | default(true)
      tags: [prepare, firewall, security]

    # === Security Hardening ===
    - name: Basic security hardening
      block:
        - name: Disable root SSH login
          lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^PermitRootLogin'
            line: 'PermitRootLogin no'
            backup: yes
          notify: restart sshd
          when: security_hardening.disable_root_login | default(true)

        - name: Configure fail2ban
          template:
            src: fail2ban-jail.local.j2
            dest: /etc/fail2ban/jail.local
            backup: yes
          notify: restart fail2ban
          when: security_hardening.fail2ban | default(true)
      tags: [prepare, security]

    # === Log Rotation Configuration ===
    - name: Configure log rotation
      template:
        src: logrotate-mitum.j2
        dest: /etc/logrotate.d/mitum
      tags: [prepare, logging]

  handlers:
    - name: restart chrony
      systemd:
        name: chrony
        state: restarted
      when: ansible_service_mgr == "systemd"

    - name: restart sshd
      systemd:
        name: sshd
        state: restarted
      when: ansible_service_mgr == "systemd"

    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
      when: ansible_service_mgr == "systemd"

  post_tasks:
    - name: Verify system preparation
      command: "{{ item }}"
      loop:
        - "id {{ mitum_service_user }}"
        - "ls -la {{ mitum_base_dir }}"
        - "sysctl net.core.somaxconn"
      register: verify_results
      changed_when: false

    - name: Display preparation summary
      debug:
        msg: |
          System preparation complete:
          - Package manager: {{ pkg_mgr }}
          - Service user: {{ mitum_service_user }}
          - Base directory: {{ mitum_base_dir }}
          - Security hardening: {{ security_hardening.enabled | default(true) }}