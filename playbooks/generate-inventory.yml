---
# Dynamic Inventory Generation Playbook
# This playbook generates Ansible inventory files based on user input from AWX surveys

- name: Generate Dynamic Inventory for Mitum Deployment
  hosts: localhost
  gather_facts: false
  connection: local
  
  vars:
    # Default values if not provided
    target_environment: "{{ target_environment | default('production') }}"
    total_node_count: "{{ total_node_count | default(5) }}"
    ip_config_method: "{{ ip_config_method | default('manual_list') }}"
    ssh_username: "{{ ssh_username | default('ubuntu') }}"
    mitum_network_id: "{{ mitum_network_id | default('mitum') }}"
    mitum_model_type: "{{ mitum_model_type | default('mitum-currency') }}"
    node_subnet_base: "{{ node_subnet_base | default('10.0.1') }}"
    subnet_start_ip: "{{ subnet_start_ip | default(10) }}"
    
    # Calculated variables
    inventory_path: "inventories/{{ target_environment }}/hosts.yml"
    group_vars_path: "inventories/{{ target_environment }}/group_vars/all.yml"
    consensus_count: "{{ ((total_node_count | int * 0.8) | round(0, 'ceil')) | int }}"
    
  tasks:
    - name: Display configuration summary
      debug:
        msg: |
          ========================================
          Dynamic Inventory Generation
          ========================================
          Environment: {{ target_environment }}
          Total Nodes: {{ total_node_count }}
          Consensus Nodes: {{ consensus_count }}
          IP Method: {{ ip_config_method }}
          Network ID: {{ mitum_network_id }}
          Model Type: {{ mitum_model_type }}
          ========================================

    - name: Validate required variables
      assert:
        that:
          - bastion_public_ip is defined and bastion_public_ip | length > 0
          - total_node_count | int >= 3
          - total_node_count | int <= 50
        fail_msg: "Required variables are missing or invalid"
        success_msg: "Configuration validation passed"

    - name: Generate node IP list based on method
      block:
        - name: Process manual IP list
          set_fact:
            node_ip_list: "{{ manual_node_ips.split(',') | map('trim') | list }}"
          when: ip_config_method == 'manual_list' and manual_node_ips is defined

        - name: Validate manual IP count
          assert:
            that:
              - node_ip_list | length == total_node_count | int
            fail_msg: "Number of manual IPs ({{ node_ip_list | length }}) doesn't match node count ({{ total_node_count }})"
          when: ip_config_method == 'manual_list'

        - name: Generate subnet-based IPs
          set_fact:
            node_ip_list: "{{ node_ip_list | default([]) + [node_subnet_base + '.' + (subnet_start_ip | int + item) | string] }}"
          loop: "{{ range(0, total_node_count | int) | list }}"
          when: ip_config_method == 'subnet_auto'

        - name: Discover AWS instances
          ec2_instance_info:
            region: "{{ aws_region | default('us-west-2') }}"
            filters:
              "tag:{{ aws_tag_filter.split('=')[0] }}": "{{ aws_tag_filter.split('=')[1] }}"
              instance-state-name: running
          register: aws_instances
          when: ip_config_method == 'aws_auto'

        - name: Extract AWS IPs
          set_fact:
            node_ip_list: "{{ aws_instances.instances | map(attribute='private_ip_address') | list }}"
          when: ip_config_method == 'aws_auto' and aws_instances.instances is defined

        - name: Discover GCP instances
          gcp_compute_instance_info:
            project: "{{ gcp_project_id }}"
            zone: "{{ gcp_zone | default('us-central1-a') }}"
            filters:
              - name = mitum-node-*
          register: gcp_instances
          when: ip_config_method == 'gcp_auto' and gcp_project_id is defined

        - name: Extract GCP IPs
          set_fact:
            node_ip_list: "{{ gcp_instances.resources | map(attribute='networkInterfaces') | flatten | map(attribute='networkIP') | list }}"
          when: ip_config_method == 'gcp_auto' and gcp_instances.resources is defined

    - name: Create inventory directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "inventories/{{ target_environment }}"
        - "inventories/{{ target_environment }}/group_vars"
        - "inventories/{{ target_environment }}/host_vars"

    - name: Generate inventory file
      template:
        src: inventory-template.yml.j2
        dest: "{{ inventory_path }}"
        mode: '0644'
        backup: true
      vars:
        environment: "{{ target_environment }}"
        bastion_ip: "{{ bastion_public_ip }}"
        nodes: "{{ node_ip_list }}"
        node_count: "{{ total_node_count }}"
        consensus_nodes: "{{ consensus_count }}"
        username: "{{ ssh_username }}"
        network_id: "{{ mitum_network_id }}"
        model_type: "{{ mitum_model_type }}"

    - name: Generate group variables file
      template:
        src: group-vars-template.yml.j2
        dest: "{{ group_vars_path }}"
        mode: '0644'
        backup: true
      vars:
        environment: "{{ target_environment }}"
        network_id: "{{ mitum_network_id }}"
        model_type: "{{ mitum_model_type }}"
        node_count: "{{ total_node_count }}"

    - name: Create SSH key directory
      file:
        path: "keys/ssh/{{ target_environment }}"
        state: directory
        mode: '0700'

    - name: Display generation results
      debug:
        msg: |
          ========================================
          Inventory Generation Complete
          ========================================
          Inventory File: {{ inventory_path }}
          Group Variables: {{ group_vars_path }}
          Generated {{ total_node_count }} nodes:
          {% for ip in node_ip_list %}
          - node{{ loop.index0 }}: {{ ip }}
          {% endfor %}
          
          Bastion: {{ bastion_public_ip }}
          Consensus Nodes: {{ consensus_count }}
          API Nodes: {{ total_node_count | int - consensus_count }}
          ========================================

    - name: Validate generated inventory
      command: ansible-inventory -i {{ inventory_path }} --list
      register: inventory_validation
      failed_when: inventory_validation.rc != 0

    - name: Display inventory validation
      debug:
        msg: "Inventory validation successful"
      when: inventory_validation.rc == 0

    - name: Create AWX inventory from generated file
      block:
        - name: Create AWX inventory
          awx.awx.inventory:
            name: "Mitum {{ target_environment | title }}"
            description: "Dynamically generated inventory for {{ target_environment }} environment"
            organization: "Mitum Operations"
            state: present
          register: awx_inventory

        - name: Import inventory hosts
          awx.awx.inventory_source:
            name: "Mitum {{ target_environment | title }} Hosts"
            inventory: "Mitum {{ target_environment | title }}"
            source: "scm"
            source_path: "{{ inventory_path }}"
            update_on_launch: true
            state: present
          when: awx_inventory is succeeded

      rescue:
        - name: AWX integration failed
          debug:
            msg: "AWX integration failed, but inventory file was generated successfully"
          
      when: "'awx' in ansible_collections"

    - name: Save generation metadata
      copy:
        content: |
          # Inventory Generation Metadata
          generated_at: "{{ ansible_date_time.iso8601 }}"
          environment: "{{ target_environment }}"
          node_count: {{ total_node_count }}
          consensus_count: {{ consensus_count }}
          api_count: {{ total_node_count | int - consensus_count }}
          network_id: "{{ mitum_network_id }}"
          model_type: "{{ mitum_model_type }}"
          ip_method: "{{ ip_config_method }}"
          bastion_ip: "{{ bastion_public_ip }}"
          node_ips:
          {% for ip in node_ip_list %}
          - "{{ ip }}"
          {% endfor %}
        dest: "inventories/{{ target_environment }}/generation-metadata.yml"
        mode: '0644'

    - name: Display next steps
      debug:
        msg: |
          ========================================
          Next Steps
          ========================================
          1. Review generated inventory: {{ inventory_path }}
          2. Add SSH keys to: keys/ssh/{{ target_environment }}/
          3. Test connectivity: make test ENV={{ target_environment }}
          4. Deploy Mitum: make deploy ENV={{ target_environment }}
          
          Or use AWX job template: "Deploy Mitum Blockchain"
          ======================================== 