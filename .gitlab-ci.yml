stages:
  - validate
  - test
  - security
  - deploy
  - notify

variables:
  ANSIBLE_VERSION: "2.13"
  PYTHON_VERSION: "3.9"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

# Validation Stage
ansible-lint:
  stage: validate
  script:
    - pip install ansible-lint
    - ansible-lint playbooks/*.yml
  only:
    - merge_requests
    - main
    - develop

yaml-lint:
  stage: validate
  script:
    - pip install yamllint
    - yamllint -c .yamllint .
  only:
    - merge_requests
    - main
    - develop

# Test Stage
syntax-check:
  stage: test
  script:
    - ansible-playbook playbooks/site.yml --syntax-check
    - ansible-playbook playbooks/deploy-mitum.yml --syntax-check
  only:
    - merge_requests
    - main
    - develop

molecule-test:
  stage: test
  services:
    - docker:dind
  script:
    - pip install molecule[docker] pytest-testinfra
    - cd roles/mitum
    - molecule test
  only:
    - merge_requests
    - main

# Security Stage
security-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy fs --exit-code 1 --no-progress .
  only:
    - main
    - develop

vault-check:
  stage: security
  script:
    - |
      find . -name "*.vault" -o -name "*vault*" | while read file; do
        if file "$file" | grep -q "ASCII text"; then
          echo "ERROR: Unencrypted vault file found: $file"
          exit 1
        fi
      done
  only:
    - main
    - develop

# Deploy Stage
deploy-dev:
  stage: deploy
  script:
    - ansible-playbook -i inventories/development/hosts.yml playbooks/site.yml
  environment:
    name: development
    url: https://dev.mitum.example.com
  only:
    - develop
  when: manual

deploy-staging:
  stage: deploy
  script:
    - ansible-playbook -i inventories/staging/hosts.yml playbooks/site.yml
  environment:
    name: staging
    url: https://staging.mitum.example.com
  only:
    - main
  when: manual

deploy-prod:
  stage: deploy
  script:
    - ansible-playbook -i inventories/production/hosts.yml playbooks/site.yml --check
    - ansible-playbook -i inventories/production/hosts.yml playbooks/site.yml
  environment:
    name: production
    url: https://mitum.example.com
  only:
    - tags
  when: manual

# Notify Stage
slack-notification:
  stage: notify
  image: curlimages/curl:latest
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"Pipeline $CI_PIPELINE_STATUS for $CI_PROJECT_NAME - $CI_COMMIT_REF_NAME\"}" \
        $SLACK_WEBHOOK_URL
  when: always
  only:
    - main
    - develop 