---
# Service management tasks for Mitum

- name: Ensure systemd service file exists
  stat:
    path: "/etc/systemd/system/{{ mitum_service_name }}.service"
  register: service_file

- name: Create systemd service if not exists
  when: not service_file.stat.exists
  template:
    src: mitum.service.j2
    dest: "/etc/systemd/system/{{ mitum_service_name }}.service"
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  when: not service_file.stat.exists

- name: Enable Mitum service
  systemd:
    name: "{{ mitum_service_name }}"
    enabled: yes

- name: Check if initial start
  stat:
    path: "{{ mitum_data_dir }}/.initialized"
  register: initialized

- name: Start Mitum service
  systemd:
    name: "{{ mitum_service_name }}"
    state: started
  register: service_start
  when: mitum_deployment_phase | default('all') in ['all', 'start']

- name: Wait for service to be ready
  wait_for:
    port: "{{ mitum_node_port }}"
    host: "{{ ansible_default_ipv4.address }}"
    state: started
    delay: 5
    timeout: 60
  when: service_start is changed

- name: Verify service health
  uri:
    url: "http://localhost:{{ mitum_node_port }}/v2/node"
    status_code: 200
    timeout: 10
  retries: 10
  delay: 3
  register: health_check
  until: health_check.status == 200
  when: 
    - service_start is changed
    - mitum_validate_startup | default(true)

- name: Check API service (API nodes only)
  uri:
    url: "http://localhost:{{ mitum_api_port }}/v2/node"
    status_code: 200
    timeout: 10
  retries: 10
  delay: 3
  when: 
    - mitum_api_enabled | default(false)
    - service_start is changed

- name: Mark as initialized
  file:
    path: "{{ mitum_data_dir }}/.initialized"
    state: touch
    owner: "{{ mitum_service_user }}"
    group: "{{ mitum_service_group }}"
  when: 
    - not initialized.stat.exists
    - health_check is succeeded